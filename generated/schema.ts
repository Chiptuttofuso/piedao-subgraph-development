// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Stat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stat", id.toString(), this);
  }

  static load(id: string): Stat | null {
    return store.get("Stat", id) as Stat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get locksCounter(): BigInt {
    let value = this.get("locksCounter");
    return value.toBigInt();
  }

  set locksCounter(value: BigInt) {
    this.set("locksCounter", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get locks(): Array<string> {
    let value = this.get("locks");
    return value.toStringArray();
  }

  set locks(value: Array<string>) {
    this.set("locks", Value.fromStringArray(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    return value.toBigInt();
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get rewardTokenTotalSupply(): BigInt {
    let value = this.get("rewardTokenTotalSupply");
    return value.toBigInt();
  }

  set rewardTokenTotalSupply(value: BigInt) {
    this.set("rewardTokenTotalSupply", Value.fromBigInt(value));
  }

  get accountRewardTokenBalance(): BigInt {
    let value = this.get("accountRewardTokenBalance");
    return value.toBigInt();
  }

  set accountRewardTokenBalance(value: BigInt) {
    this.set("accountRewardTokenBalance", Value.fromBigInt(value));
  }

  get accountWithdrawableRewards(): BigInt {
    let value = this.get("accountWithdrawableRewards");
    return value.toBigInt();
  }

  set accountWithdrawableRewards(value: BigInt) {
    this.set("accountWithdrawableRewards", Value.fromBigInt(value));
  }

  get accountWithdrawnRewards(): BigInt {
    let value = this.get("accountWithdrawnRewards");
    return value.toBigInt();
  }

  set accountWithdrawnRewards(value: BigInt) {
    this.set("accountWithdrawnRewards", Value.fromBigInt(value));
  }

  get accountDepositTokenBalance(): BigInt {
    let value = this.get("accountDepositTokenBalance");
    return value.toBigInt();
  }

  set accountDepositTokenBalance(value: BigInt) {
    this.set("accountDepositTokenBalance", Value.fromBigInt(value));
  }

  get accountDepositTokenAllowance(): BigInt {
    let value = this.get("accountDepositTokenAllowance");
    return value.toBigInt();
  }

  set accountDepositTokenAllowance(value: BigInt) {
    this.set("accountDepositTokenAllowance", Value.fromBigInt(value));
  }
}

export class Lock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Lock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Lock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Lock", id.toString(), this);
  }

  static load(id: string): Lock | null {
    return store.get("Lock", id) as Lock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lockId(): BigInt {
    let value = this.get("lockId");
    return value.toBigInt();
  }

  set lockId(value: BigInt) {
    this.set("lockId", Value.fromBigInt(value));
  }

  get lockDuration(): BigInt {
    let value = this.get("lockDuration");
    return value.toBigInt();
  }

  set lockDuration(value: BigInt) {
    this.set("lockDuration", Value.fromBigInt(value));
  }

  get lockedAt(): BigInt {
    let value = this.get("lockedAt");
    return value.toBigInt();
  }

  set lockedAt(value: BigInt) {
    this.set("lockedAt", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get withdrawn(): boolean {
    let value = this.get("withdrawn");
    return value.toBoolean();
  }

  set withdrawn(value: boolean) {
    this.set("withdrawn", Value.fromBoolean(value));
  }
}
